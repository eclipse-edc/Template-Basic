#
#  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#

---
name: "Run Tests"

on:
  # run this workflow on pushes on the following branches:
  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  # run this workflow on pull requests
  pull_request:

  # run this workflow on manual trigger
  workflow_dispatch:

# Abort old job when a newer one is queued
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify-license-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Check for files without a license header"
        run: |-
          # checks all java, yaml, kts and sql files for an Apache 2.0 license header
          cmd="grep -riL \"SPDX-License-Identifier: Apache-2.0\" --include=\*.{java,yaml,yml,kts,sql} --exclude-dir={.gradle,\*\openapi} ."
          violations=$(eval $cmd | wc -l)
          if [[ $violations -ne 0 ]] ; then
            echo "$violations files without license headers were found:";
            eval $cmd;
            exit 1;
          fi

  verify-checkstyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java
      - name: Run Checkstyle
        run: |
          ./gradlew checkstyleMain checkstyleTest

  unit-tests:
    runs-on: ubuntu-latest
    needs: [ verify-license-headers ]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java
      - name: Run Unit tests
        run: ./gradlew test

  # Verify that both the control plane and data plane are runnable (given some basic config)
  smoke-tests:
    runs-on: ubuntu-latest
    needs: verify-license-headers
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java
      - name: Build docker images
        run: ./gradlew dockerize

      - name: Run ControlPlane launcher
        run: |
          docker run -d --rm --name controlplane \
            -e "WEB_HTTP_MANAGEMENT_PORT=8182" \
            -e "WEB_HTTP_MANAGEMENT_PATH=/api/management" \
            -e "WEB_HTTP_CONTROL_PORT=10001" \
            -e "WEB_HTTP_CONTROL_PATH=/api/v1/resolution/" \
            -e "WEB_HTTP_PORT=8080" \
            -e "WEB_HTTP_PATH=/api" \
            -e "EDC_IAM_STS_OAUTH_TOKEN_URL=test.com/token" \
            -e "EDC_IAM_STS_OAUTH_CLIENT_ID=client-id" \
            -e "EDC_IAM_STS_OAUTH_CLIENT_SECRET_ALIAS=test-alias" \
            controlplane
      - name: Wait for ControlPlane to be healthy
        uses: raschmitt/wait-for-healthy-container@v1
        with:
          container-name: controlplane
          timeout: '60'

      - name: Run DataPlane launcher
        run: |
          docker run -d --rm --name dataplane \
            -e "EDC_TRANSFER_PROXY_TOKEN_VERIFIER_PUBLICKEY_ALIAS=testalias" \
            -e "EDC_TRANSFER_PROXY_TOKEN_SIGNER_PRIVATEKEY_ALIAS=testalias" \
            -e "EDC_DPF_SELECTOR_URL=http://test.me" \
            -e "WEB_HTTP_CONTROL_PORT=10001" \
            -e "WEB_HTTP_CONTROL_PATH=/api/v1/resolution/" \
            -e "WEB_HTTP_PORT=8080" \
            -e "WEB_HTTP_PATH=/api" \
            dataplane
      - name: Wait for DataPlane to be healthy
        uses: raschmitt/wait-for-healthy-container@v1
        with:
          container-name: dataplane
          timeout: '60'